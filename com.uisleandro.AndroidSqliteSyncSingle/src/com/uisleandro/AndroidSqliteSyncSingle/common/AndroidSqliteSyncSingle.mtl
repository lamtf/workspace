[comment encoding = UTF-8 /]
[module AndroidSqliteSyncSingle('http://www.eclipse.org/uml2/5.0.0/UML')]

[comment CPF is a unique key, please fix it on all databases /]


[template public begin_reserve(name : String)]
//Start of user code [name /]
[/template]

[template public end_reserve(name : String)]
// [name /]
//End of user code
[/template]

[comment TODO: add filters here if needed /]
[query public get_modules(root : Model) : Sequence(Package) = 
eContents(Package)
	->select(x|x.name = 'mvc')
	->first() 
	.eContents(Package)
/]

[comment TODO: add filters here if needed /]
[query public get_tables(modul : Package) : Sequence(Class) =  
eContents(Package)
	->select(x|x.name = 'dataModels')
	->first() 
	.eContents(Class)
/]

[comment TODO: add filters here if needed /]
[query public get_fields(tbl : Class) : Sequence(Property) = 
eContents(Property)
/]

[query public get_no_fks(tbl : Class) : Sequence(Property) = 
eContents(Property)->select(x| not(isFk(x)))
/]

[query public get_fks(tbl : Class) : Sequence(Property) = 
eContents(Property)->select(x| isFk(x))
/]


[comment TODO: add filters here if needed /]
[query public the_client_cant_change(arg : Property) : Boolean = false /]


[query public is_string(arg : Property) : Boolean = 
if null = arg.type or 
arg.type.name.equalsIgnoreCase('Date') or 
arg.type.name.equalsIgnoreCase('DateTime') or 
arg.type.name.equalsIgnoreCase('Time') or 
arg.type.name.equalsIgnoreCase('Identifier') or 
arg.type.name.equalsIgnoreCase('Number') or
arg.type.name.equalsIgnoreCase('PictureType') or
arg.type.name.equalsIgnoreCase('Money') or
arg.type.name.equalsIgnoreCase('PreciseNumber') or 
arg.type.name.equalsIgnoreCase('VeryPreciseNumber2') or
arg.type.name.equalsIgnoreCase('YesNoQuestion') or
isFk() then
false
else
true
endif
 /]

[query public default_zero(arg : Property) : String =
if null = arg.type 
or arg.type.name.equalsIgnoreCase('Date') 
or arg.type.name.equalsIgnoreCase('DateTime') 
or arg.type.name.equalsIgnoreCase('Time') 
or arg.type.name.equalsIgnoreCase('Identifier') 
or arg.type.name.equalsIgnoreCase(arg.name)
then
'0L'
else if arg.type.name.equalsIgnoreCase('Number') 
or arg.type.name.equalsIgnoreCase('PictureType') then 
'0'
else if arg.type.name.equalsIgnoreCase('Money') then 
'0F'
else if arg.type.name.equalsIgnoreCase('PreciseNumber') 
or arg.type.name.equalsIgnoreCase('VeryPreciseNumber2') then 
'0L'
else if arg.type.name.equalsIgnoreCase('YesNoQuestion') then 
'false'
else
'""'
endif endif endif endif endif
 /]

[query public get_configuration_namespace(arg : Model) : String = 
self.eContents(Class)->select(x|x.name='custom_config')->first().eContents(Property)
->select(x|x.type.name.toString().equalsIgnoreCase('app_namespace'))->first().name
 /]

[query public get_java_type(arg: Property): String =
if null = arg.type 
or arg.type.name.equalsIgnoreCase('Date') 
or arg.type.name.equalsIgnoreCase('DateTime') 
or arg.type.name.equalsIgnoreCase('Time') 
or arg.type.name.equalsIgnoreCase('Identifier') 
or arg.type.name.equalsIgnoreCase(arg.name)
then
'long'
else if arg.type.name.equalsIgnoreCase('Number') 
or arg.type.name.equalsIgnoreCase('PictureType') then 
'int'
else if arg.type.name.equalsIgnoreCase('Money') then 
'float'
else if arg.type.name.equalsIgnoreCase('PreciseNumber') 
or arg.type.name.equalsIgnoreCase('VeryPreciseNumber2') then 
'double'
else if arg.type.name.equalsIgnoreCase('YesNoQuestion') then 
'boolean'
else
'String'
endif endif endif endif endif
/]

[query public getter_indexed(arg: Property, cname : String, i: Integer): String =
if null = arg.type
or arg.type.name.equalsIgnoreCase(arg.name)
or arg.type.name.equalsIgnoreCase('Date') 
or arg.type.name.equalsIgnoreCase('DateTime') 
or arg.type.name.equalsIgnoreCase('Time') 
or arg.type.name.equalsIgnoreCase('Identifier')
then 
cname + '.getLong('+i+')'
else if arg.type.name.equalsIgnoreCase('Number') 
or arg.type.name.equalsIgnoreCase('PictureType') then 
cname + '.getInt('+i+')'
else if arg.type.name.equalsIgnoreCase('Money') then 
cname + '.getFloat('+i+')'
else if arg.type.name.equalsIgnoreCase('PreciseNumber') 
or arg.type.name.equalsIgnoreCase('VeryPreciseNumber2') then 
cname + '.getFloat('+i+')'
else if arg.type.name.equalsIgnoreCase('YesNoQuestion') then 
'('+cname + '.getInt('+i+') > 0)'
else
cname + '.getString('+i+')'
endif endif endif endif endif
/]


[query public getter_named(arg: Property, cname : String): String =
if null = arg.type
or arg.type.name.equalsIgnoreCase(arg.name)
or arg.type.name.equalsIgnoreCase('Date') 
or arg.type.name.equalsIgnoreCase('DateTime') 
or arg.type.name.equalsIgnoreCase('Time') 
or arg.type.name.equalsIgnoreCase('Identifier')
then 
cname + '.getLong("'+arg.getName()+'")'
else if arg.type.name.equalsIgnoreCase('Number') 
or arg.type.name.equalsIgnoreCase('PictureType') then 
cname + '.getInt("'+arg.getName()+'")'
else if arg.type.name.equalsIgnoreCase('Money') then 
'Float.valueOf('+cname+'.getString("'+arg.getName()+'"))'
else if arg.type.name.equalsIgnoreCase('PreciseNumber') 
or arg.type.name.equalsIgnoreCase('VeryPreciseNumber2') then 
cname + '.getFloat("'+arg.getName()+'")'
else if arg.type.name.equalsIgnoreCase('YesNoQuestion') then 
cname + '.getInt("'+arg.getName()+'") > 0'
else
cname + '.getString("'+arg.getName()+'")'
endif endif endif endif endif
/]


[comment first android type mapping /]
[query public get_sqlite_type(arg: Property): String =
if null = arg.type then
	'INTEGER'
else if arg.type.name.equalsIgnoreCase(arg.name) then
	'INTEGER'
else if arg.type.name.equalsIgnoreCase('Date') then
	'INTEGER'
else if arg.type.name.equalsIgnoreCase('DateTime') then
	'INTEGER'
else if arg.type.name.equalsIgnoreCase('Time') then
	'INTEGER'
else if arg.type.name.equalsIgnoreCase('Number') then
	'INTEGER'
else if arg.type.name.equalsIgnoreCase('Money') then
	'REAL(10,2)'
else if arg.type.name.equalsIgnoreCase('PreciseNumber') then
	'DOUBLE'
else if arg.type.name.equalsIgnoreCase('VeryPreciseNumber2') then
	'DOUBLE PRECISION'
else if arg.type.name.equalsIgnoreCase('YesNoQuestion') then
	'BOOLEAN'
else if arg.type.name.equalsIgnoreCase('Identifier') then
	'INTEGER'
else if arg.type.name.equalsIgnoreCase('GuidType') then
	'CHAR(36)'
else if arg.type.name.equalsIgnoreCase('Abbreviature') then
	if arg.name.indexOf('uf') > 0
	or arg.name.indexOf('state') > 0
 	then
		'CHAR(2)'
	else
		'CHAR(8)'
	endif
else if arg.type.name.equalsIgnoreCase('BigText') then
	'VARCHAR(256)'
else if arg.type.name.equalsIgnoreCase('File') then
	'VARCHAR(128)'
else if arg.type.name.equalsIgnoreCase('SmallText') then
	if arg.name.indexOf('zip') > 0
	or arg.name.indexOf('cep') > 0
 	then
		'CHAR(15)'
	else
		'CHAR(30)'
	endif
else if arg.type.name.equalsIgnoreCase('MediumText') then
	'VARCHAR(45)'
else if arg.type.name.equalsIgnoreCase('BarcodeType') then
	'CHAR(64)'
else if arg.type.name.equalsIgnoreCase('PictureType') then
	'INTEGER'
else 
	'VARCHAR(45)'
endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif/]


[template public FolderName(arg : String)]
[for (st : String | self.tokenize('.')) separator ('/') after ('/')][st/][/for]
[/template]


[query public isBoolean(arg : Property) : Boolean = 
if(self.type.name.toString().equalsIgnoreCase('boolean')) then true else false endif /]


[query public isFk(prop : Property) : Boolean = 
if null = self.type
or self.type.name.toString().equalsIgnoreCase(self.name) then
true else false endif /]

[query public getName(arg : Property) : String = 
if(self.type.name.toString().equalsIgnoreCase(self.name.toString())) then
'fk_'+self.name
else 
self.name
endif
/]

[query public getNameRef(arg : Property, tname : String) : String = 
if(self.type.name.toString().equalsIgnoreCase(self.name.toString())) then
'DbHelper.'+tname.toUpperCase()+'_FK_'+self.name.toUpperCase()
else 
'DbHelper.'+tname.toUpperCase()+'_'+self.name.toUpperCase()
endif
/]

[query public gotStereotype(arg : NamedElement, sname : String) : Boolean = 
self.getAppliedStereotypes()->exists(s : Stereotype | s.name = sname) /]

[template public ToCamelCase(arg : String)]
[for (it : String | arg.tokenize('_'))][it.toUpperFirst()/][/for]
[/template]

[template public ToCamelCaseSpaced(arg : String)]
[for (it : String | arg.tokenize('_')) separator (' ')][it.toUpperFirst()/][/for]
[/template]


[query public getModelClasses(arg : Package) : Sequence(Class) = 
self.eContents(Package)->select( x | x.name ='model')->first().eContents(Class)
 /]

[comment i dont have a ds for each view but for each tbl /]
[comment so the fix will be on the inserting views 
TODO: aplicar um esteriotipo na classe identidade
/]
[query public getViewClasses(arg : Package) : Sequence(Class) = 
self.eContents(Package)->select( x | x.name ='view')->first().eContents(Class)
 /]

[query public nullable(arg : Property) : String = 
if(self.name.indexOf('update') > 0) then
'NULL'
else
if(self.owner.oclAsType(Class).name.equalsIgnoreCase(self.name)) then
'NULL'
else
if(self.type.name.toString().equalsIgnoreCase(self.name)) then
'NULL'
else
'NOT NULL'
endif
endif
endif
 /]

[query public isSelfFK(arg : Property) : Boolean =
if(self.owner.oclAsType(Class).name.equalsIgnoreCase(self.name)) then
	true
else
	false
endif
 /]

[query public getForeignKeys(arg : Class) : Sequence(Property) = 
self.eContents(Property)->select(x: Property | x.name = x.type.name)->asSequence() /]

[comment substituir depois .. /]
[query public find_modul_name(arg : Package, name: String) : String =
self.eContents(Package)->select(x : Package |
x.eContents(Class)->exists(c : Class | c.name = name)
)->first().name
 /]



[query public isDate(arg : Property) : Boolean = 
self.type.name.toString().equalsIgnoreCase('date') /]

[template public PackName(arg : NamedElement)]
[if ( oclIsTypeOf(Property) )
][if( oclAsType(Property).isFk() )
][ToCamelCase(oclAsType(Property).type.oclAsType(Class).
owner.owner.oclAsType(NamedElement).name)
/][else][ToCamelCase(owner.
owner.owner.oclAsType(NamedElement).name)
/][/if][else][ToCamelCase(owner.owner.oclAsType(NamedElement).name)
/][/if][/template]

[comment

TODO: Preciso adicionar as funcoes insert() e update()

/]
[template public android_create_offline_helper_class(pname: String, modul: Package, tbl: Class)]
package [pname /].[modul.name/].model;

import java.util.ArrayList;
import java.util.List;
import android.database.Cursor;
import android.util.Log;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;

import [pname /].[modul.name/].view.[tbl.name.ToCamelCase() /]DataView

public class [tbl.name.ToCamelCase() /]OfflineHelper {

	private Context context;
	private SQLiteDatabase database;
	private DbHelper db_helper;

	public [tbl.name.ToCamelCase() /]OfflineHelper (Context context) {
		this.context = context;
	}

	public [tbl.name.ToCamelCase() /]OfflineHelper (Context context) {
		db_helper = DbHelper.getInstance(context);
		try{
			database = db_helper.getWritableDatabase();
		}catch(SQLException e){
			Log.wtf("[tbl.name.ToCamelCase() /]OfflineHelper", "Exception: "+Log.getStackTraceString(e));
		}
	}

	public void open () throws SQLException {
		database = db_helper.getWritableDatabase();
	}

	public void close () {
		db_helper.close();
	}

	public long insert([tbl.name.ToCamelCase() /]View that){
		ContentValues values = new ContentValues();
		//should not set the server id

		if(that.getServerId() > 0){
			values.put(DbHelper.[tbl.name.toUpperCase() /]_SERVER_ID, that.getServerId());
		}

		values.put(DbHelper.[tbl.name.toUpperCase() /]_DIRTY, that.isDirty());
[for (prop : Property | get_fields(tbl) )
][if (prop.isFk())]
		if(that.getFk[prop.getName().ToCamelCase() /]() > 0){
			values.put(DbHelper.[tbl.name.toUpperCase() /]_[prop.getName().toUpperCase() /], that.getFk[prop.getName().ToCamelCase() /]());
		}
[else]
		values.put(DbHelper.[tbl.name.toUpperCase() /]_[prop.getName().toUpperCase() /], that.get[prop.getName().ToCamelCase() /]());
[/if][/for]
		long last_id = database.insert(DbHelper.TABLE_[tbl.name.toUpperCase() /], null, values);
		return last_id;
	}

	public int update([tbl.name.ToCamelCase() /]View that){
		ContentValues values = new ContentValues();
		if(that.getServerId() > 0){
			values.put(DbHelper.[tbl.name.toUpperCase() /]_SERVER_ID, that.getServerId());
		}
		values.put(DbHelper.[tbl.name.toUpperCase() /]_DIRTY, that.isDirty());

[for (prop : Property | get_fields(tbl) )]
[if (prop.isFk())]
		if(that.getFk[prop.getName().ToCamelCase() /]() > 0){
			values.put(DbHelper.[tbl.name.toUpperCase() /]_[prop.getName().toUpperCase() /], that.getFk[prop.getName().ToCamelCase() /]());
		}
[else]
		values.put(DbHelper.[tbl.name.toUpperCase() /]_[prop.getName().toUpperCase() /], that.get[prop.getName().ToCamelCase() /]());
[/if]
[/for]
		int rows_affected = database.update(DbHelper.TABLE_[tbl.name.toUpperCase() /], values, DbHelper.[tbl.name.toUpperCase() /]_ID + " = " + String.valueOf(that.getId()), null);
		return rows_affected;
	}

	public List<[tbl.name.ToCamelCase() /]DataView> listForInsertOnServer(long page_count, long page_size){

		String query = "[let fks : Sequence(Property) = 
tbl.eContents(Property)
->select(x: Property | isFk(x)) 
]
SELECT t0.id, t0.server_id, t0.dirty, "+
[for (prop : Property | get_fields(tbl))
 separator (', " +\n') after ('" +\n')]		"[if( isFk(prop)
)][if(the_client_cant_change(prop))]t0.fk_[prop.name /][else]t[i/].server_id as fk_[prop.name/][/if][else]t0.[prop.name /][/if][/for]
		" FROM "+DbHelper.TABLE_[tbl.name.toUpperCase() /]+" t0"[if (0 < fks->size())] +[else];[/if]
[for (prop : Property | fks) separator ('" +\n') after ('";')
]		" INNER JOIN "+DbHelper.TABLE_[prop.name.toUpperCase() /]+" t[i/] ON t0.fk_[prop.name /] = t[i/].id[/for]
[/let]
		query += " WHERE t0.server_id IS NULL";
		if(page_size > 0){
			query += " LIMIT " + String.valueOf(page_size) + " OFFSET " + String.valueOf(page_size * page_count);
		}
		query += ";";
		Log.wtf("rest-api", query);
		List<[tbl.name.ToCamelCase() /]View> those = new ArrayList<>();
		Cursor cursor = database.rawQuery(query, null);
		cursor.moveToFirst();
	    while(!cursor.isAfterLast()){
	      those.add([tbl.name.ToCamelCase() /]View.FromCursor(cursor));
	      cursor.moveToNext();
	    }
	    cursor.close();
		return those;
	}

	//list for update on server
	//translates the foreign keys
	public List<[tbl.name.ToCamelCase() /]DataView> listForUpdateOnServer(long page_count, long page_size){
		//Log.wtf("rest-api", "listSomeDirty");
		[comment // Estou com um erro pois nao gero as tabelas que nao fazem parte deste modulo /]
		// Estou com um erro pois nao gero as tabelas que nao fazem parte deste modulo
		String query = "[let fks : Sequence(Property) = get_fks(tbl)]
SELECT t0.id, t0.server_id, t0.dirty, "+
[for (prop : Property | get_no_fks(tbl))
 separator (', " +\n') after ('" +\n')]		"[if(prop.name.equalsIgnoreCase(prop.type.name)
)][if(the_client_cant_change(prop))]t0.fk_[prop.name /][else]t[i/].server_id as fk_[prop.name/][/if][else]t0.[prop.name /][/if][/for]
		" FROM "+DbHelper.TABLE_[tbl.name.toUpperCase() /]+" t0"[if (0 < fks->size())] +[else];[/if]
[for (prop : Property | fks) separator ('" +\n') after ('";')
]		" INNER JOIN "+DbHelper.TABLE_[prop.name.toUpperCase() /]+" t[i/] ON t0.fk_[prop.name /] = t[i/].id[/for]
[/let]
		query += " WHERE t0." + DbHelper.[tbl.name.toUpperCase() /]_DIRTY + " = 1";
		if(page_size > 0) {
			query += " LIMIT " + String.valueOf(page_size) + " OFFSET " + String.valueOf(page_size * page_count);
		}
		query += ";";
		//Log.wtf("rest-api", query);
		List<[tbl.name.ToCamelCase() /]View> those = new ArrayList<>();
		Cursor cursor = database.rawQuery(query, null);
		cursor.moveToFirst();
	    while(!cursor.isAfterLast()){
	      those.add([tbl.name.ToCamelCase() /]View.FromCursor(cursor));
	      cursor.moveToNext();
	    }
	    cursor.close();
	}

	public int fixAfterServerInsertAndUpdate(long local_id, long remote_id, long last_update_time){
		ContentValues values = new ContentValues();
		values.put(DbHelper.[tbl.name.toUpperCase() /]_SERVER_ID, remote_id);
		values.put(DbHelper.[tbl.name.toUpperCase() /]_LAST_UPDATE_TIME, last_update_time);
		values.put(DbHelper.[tbl.name.toUpperCase() /]_DIRTY, 0);
		[comment im sorry i know this column /]
		int rows_affected = database.update(
			DbHelper.TABLE_[tbl.name.toUpperCase() /],
			values,
			DbHelper.[tbl.name.toUpperCase() /]_ID + " = " + String.valueOf(local_id),
		null);
		return rows_affected;
	}

	// given the last id i have on client i can
	// on the client side
	public long getLastServerId(){
		long result = 0;
		String query = "SELECT MAX(server_id) FROM " + DbHelper.TABLE_[tbl.name.toUpperCase() /] +";";
		Cursor cursor = database.rawQuery(query, null);
		return cursorToLong(cursor);
	}

	//the idea is that i don't want to iterate over all the data,
	//bringing all the data to the server is expensive, even if the return value is null sometimes
	//just bring from the server what is newer than my newer data, for updating
	//the implementation is also easier :D
	public long getLastUpdateTime(){
		long result = 0;
[comment]String query = "SELECT MAX(last_update_time) FROM " + DbHelper.TABLE_[tbl.name.toUpperCase() /] +";";[/comment]
		String query = "SELECT last_update_time FROM " + DbHelper.TABLE_UPDATE_HISTORY +" WHERE table_name = '"+DbHelper.TABLE_[tbl.name.toUpperCase() /]+"';";
		Cursor cursor = database.rawQuery(query, null);
		return cursorToLong(cursor);
	} 

	//get the last_update_time, from this table, if if null
	public void before_client_updating(){
		String query = "UPDATE " + DbHelper.TABLE_UPDATE_HISTORY + " SET last_update_time = ( SELECT MAX(last_update_time) FROM " +
			DbHelper.TABLE_[tbl.name.toUpperCase() /] + " ) WHERE table_name = '" + DbHelper.TABLE_[tbl.name.toUpperCase() /] + "' AND last_update_time IS NULL;";
		database.rawQuery(query, null);
	}

	//set the last_update_time, from this table, to null
	public void after_client_updating(){
		String query = "UPDATE " + DbHelper.TABLE_UPDATE_HISTORY + " SET last_update_time = NULL WHERE table_name = '" + DbHelper.TABLE_[tbl.name.toUpperCase() /] + "';";
		database.rawQuery(query, null);
	}


	//after i will update then client
[if (get_fks(tbl)->notEmpty())
][let fks : Sequence(Property) = get_fks(tbl)]
	//and after updating the client i need to fix the foreign keys
	public int fixClientForeignKeys(){
		String query = "UPDATE " + DbHelper.TABLE_[tbl.name.toUpperCase() /] + " SET "+
[for (prop : Property | fks) separator (', " +\n') after (';";')]
		"fk_[prop.name /] = ( SELECT id FROM " + DbHelper.TABLE_[prop.name.toUpperCase() /] + " WHERE " + DbHelper.TABLE_[prop.name.toUpperCase() /] + ".server_id = " + DbHelper.TABLE_[tbl.name.toUpperCase() /] + ".fk_[prop.name /] )[/for]
		int result = 0;
		Cursor cursor = database.rawQuery(query, null);
		return cursorToInteger(cursor);
	}

[/let][else]
	// this class don't need to fix client foreign keys
[/if]

	[comment
	vou precisar fazer modificações aqui para usar a flag dirty,
	para que eu possa atualizar o servidor enviando menos dados.. /]

	[comment 
	ainda não sei como atualizar o cliente de forma eficiente 
	pois não posso usar uma flag dirty no servidor como no cliente..
	não quero usar todos os dados, acho que fiz alguma alteracao no php /]
}
[/template]


[template public Camel2(arg : String)
][for (name : String | tokenize('.')) separator ('.')
][name /][/for][/template]


[comment
copy from: ANdroidSqliteDatabseSIngle.mtl
/]
[template public android_create_tblviewclass(pname: String, modul: Package, tbl: Class)]
package [pname /].[modul.name /].view; [comment Core is modul.name /]

import org.json.JSONException;
import org.json.JSONObject;
import android.database.Cursor;

public class [tbl.name.ToCamelCase() /]DataView {

	private long id;
	private long server_id;
	private boolean dirty;
[for (prop : Property | get_fields(tbl) )]
	private [get_java_type(prop) /] [prop.getName() /];
[/for]

	public [tbl.name.ToCamelCase()/]DataView () {
		this.id = 0L;
		this.server_id = 0L;
		this.dirty = false;
[for (prop : Property | get_fields(tbl))
]		this.[getName() /] = [default_zero() /];
[/for]
	}

	public long getId () {
		return id;
	}

	public void setId (long id) {
		this.id = id;
	}

	public long getServerId () {
		return server_id;
	}

	public void setServerId (long server_id) {
		this.server_id = server_id;
	}

	public boolean isDirty () {
		return dirty;
	}

	public void setDirty (boolean dirty) {
		this.dirty = dirty;
	}

	[for (prop : Property | get_fields(tbl))]
	public [get_java_type(prop)/] get[prop.getName().ToCamelCase()/] () {
		return [prop.getName() /];
	}

	public void set[prop.getName().ToCamelCase()/] ([get_java_type(prop)/] [prop.getName()/]) {
		this.[prop.getName()/] = [prop.getName()/];
	}

	[/for]
	public String toJsonString () {
		String result = "{" +
			"\"client_id\":\"" + this.id + "\"," +
			"\"server_id\":\"" + this.server_id + "\"," +
[for (prop : Property | get_fields(tbl)
) separator ('+ "\\"," + \n') after ('+ "\\"" + \n')][if (the_client_cant_change(prop))]
		"\"[prop.getName() /]\": " + DbHelper.CONST_FK_[prop.name.toUpperCase() /]
[else]
			"\"[prop.getName() /]\":\"" + this.[prop.getName() /][/if][/for]
		"}";
		return result;
	}

	public String toString () {
[if (tbl.eContents(Property)->exists(x: Property |
	x.name.toString().indexOf('name') > 0 or
	x.name.toString().indexOf('nome') > 0))
]
		return this.[tbl.eContents(Property)->select(x: Property |
	x.name.toString().indexOf('name') > 0 or
	x.name.toString().indexOf('nome') > 0)->first().name /];
[else][if (tbl.eContents(Property)
->exists(x: Property | is_string(x)) )]
		return this.[tbl.eContents(Property)->select(x: Property | is_string(x) )->first().name /];
[else]
		return "[tbl.name.ToCamelCase() /]View";
[/if][/if]

	}

	public static [tbl.name.ToCamelCase() /]View FromJson(String json){
		if(json != null) {
			try {
				JSONObject obj = new JSONObject(json);
				return [tbl.name.ToCamelCase() /]View.FromJsonObj(obj);
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	public static [tbl.name.ToCamelCase() /]View FromJsonObj (JSONObject obj) {
		if(null != obj) {
			try {
				[tbl.name.ToCamelCase() /]View result = new [tbl.name.ToCamelCase() /]View();
				if(obj.has("client_id") && !obj.isNull("client_id")){
					result.setId(obj.getLong("client_id"));
				}
				if(obj.has("server_id") && !obj.isNull("server_id")){
					result.setServerId(obj.getLong("server_id"));
				}
				/* if(obj.has("dirty") && !obj.isNull("dirty")){
					result.setDirty(obj.getInt("dirty") > 0);
				} */
[for (prop : Property | get_fields(tbl))]
[if (prop.isFk())]
				if(obj.has("[prop.getName() /]") && !obj.isNull("[prop.getName() /]")){
					result.set[prop.getName().ToCamelCase()/]([getter_named(prop, 'obj') /]);
				}
[else]
				result.set[prop.getName().ToCamelCase()/]([getter_named(prop, 'obj') /]);
[/if]
[/for]
				return result;
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	public static [tbl.name.ToCamelCase() /]View FromCursor (Cursor cursor) {
		if(null != cursor){
			[tbl.name.ToCamelCase() /]View result = new [tbl.name.ToCamelCase() /]View();
			result.setId(cursor.getLong(0));
			result.setServerId(cursor.getLong(1));
			result.setDirty(cursor.getInt(2) > 0);
[for (prop : Property | get_fields(tbl))]
			result.set[prop.getName().ToCamelCase() /]([getter_indexed(prop,'cursor', i+2) /]);
[/for]
			return result;		
		}
		return null;
	}

	public String[ '[' /][ ']' /] toInsertArray () {
		return new String[ '[' /][ ']' /]{[for (prop : Property | get_fields(tbl)) separator (', ')][to_java_string(prop) /][/for]};
	}

	public String[ '[' /][ ']' /] toUpdateArray () {
		return new String[ '[' /][ ']' /]{String.valueOf(id), String.valueOf(server_id), String.valueOf(dirty), [for (prop : Property | get_fields(tbl)) separator (', ')][to_java_string(prop) /][/for]};
	}

}
[/template]

[comment
copy from: ANdroidSqliteDatabseSIngle.mtl
/]
[query public to_java_string(arg: Property): String =
if null = arg.type
or arg.type.name.equalsIgnoreCase('BarcodeType')
or arg.type.name.equalsIgnoreCase('File')
or arg.type.name.equalsIgnoreCase('GuidType')
or arg.type.name.equalsIgnoreCase('BigText')
or arg.type.name.equalsIgnoreCase('SmallText')
or arg.type.name.equalsIgnoreCase('Abbreviature')
or arg.type.name.equalsIgnoreCase('MediumText') then
arg.name
else
'String.valueOf('+arg.name+')'
endif/]


[comment >> BEGIN INSERT AND UPDATE ON CLIENT /]
[template public android_insert_on_client(tbl: Class)]
public void insert_on_client(){
[comment
	from the maximum id on client to upper, solved
/]
	long the_last_server_id_on_client = [tbl.name.ToCamelCase().toLowerFirst()/]OfflineHelper.getLastServerId(); //step 1,1
	//paginator.setPageSize(100);
	paginator.setPageNumber(0);
	paginator.setFinished(false);
	paginator.setError(false);
	Log.v("rest-api", "atempt to insert on the client .. ");
	//i think now im repeating the process
	while (false == paginator.isFinished()) {
		String json = "{ \"server_id\": " + String.valueOf(the_last_server_id_on_client) + "," +
					" \"page_number\" : " + String.valueOf(paginator.getPageNumber()) + "," +
					" \"page_size\": " + String.valueOf(paginator.getPageSize()) + " }"; 
		paginator.nextPage();
		Log.v("rest-api", "get_for_client_insert :\n" + json);
		//step 1,2
		client.run(
			"https://192.168.0.250/naiara/sync/[tbl.name/]/get_for_client_insert", json,
			new TlsCallback() {
				@Override
				public void CallBack(String result) {
					Log.v("rest-api", "get_for_client_insert :\n" + result);
					try {
						JSONArray array = new JSONArray(result);
						if (0 == array.length()) {
							paginator.setFinished(true);
						}
						for (int i = 0; i < array.length(); i++) {
							//Log.v("rest-api", array.getJSONObject(i).toString());
							[tbl.name.ToCamelCase()/] [tbl.name/] = [tbl.name.ToCamelCase()/].FromJsonObj(array.getJSONObject(i));
							[tbl.name.ToCamelCase().toLowerFirst()/]OfflineHelper.insert([tbl.name/]); //step 1,3
						}
					} catch (JSONException ex) {
						paginator.setFinished(true);
						ex.printStackTrace();
					}
				}
			}
		);
	}

}
[/template]

[template public android_update_on_client(tbl: Class)]
//todo error se eu quero usar assim eu tenho que ter esta informação, no cliente, por tabela
public void update_on_client(){
[comment 
	fine updating.. difficult and expensive..
	1. from the client to the server send a comparing list with
	id and last_update_time
	2. for each item on the list, select if the client
	last_update_time is greather
	3. update on client
/]
	//not exactly yet implemented
	//todo test..
	//paginator.setPageSize(100);
	paginator.setPageNumber(0);
	paginator.setFinished(false);
	paginator.setError(false);
		Log.v("rest-api", "atempt to update on client .. ");
		[tbl.name.ToCamelCase().toLowerFirst()/]OfflineHelper.before_client_updating();
		while (false == paginator.isFinished()) {
			long lastUpdateTime = [tbl.name.ToCamelCase().toLowerFirst()/]OfflineHelper.getLastUpdateTime();
			String json = "{ " +
			"\"last_update_time\" : " + String.valueOf(lastUpdateTime) +
			", \"page_number\" : " + paginator.getPageNumber() +
			", \"page_size\" : " + paginator.getPageSize() +
			" }";
			paginator.nextPage();
			Log.v("rest-api", "get_for_client_update :\n" + json);
			client.run("https://192.168.0.250/naiara/sync/[tbl.name/]/get_for_client_update", json, new TlsCallback() {
					@Override
					public void CallBack(String result) {
					Log.v("rest-api", "get_for_client_update :\n" + result);
						try {
							JSONArray array = new JSONArray(result);
							//i can't finish it if this don't have any value
							if(0 < array.length()){
								for (int i = 0; i < array.length(); i++) {
									[tbl.name.ToCamelCase()/] obj = [tbl.name.ToCamelCase()/].FromJsonObj(
											array.getJSONObject(i)
									);
									[tbl.name.ToCamelCase().toLowerFirst()/]OfflineHelper.update(obj);
								}
							} else {
								paginator.setFinished(true);
							}
						} catch (JSONException e) {
							e.printStackTrace();
							paginator.setFinished(true);
							paginator.setError(true);
						}
					}
				}
			);
		}

		if(!paginator.isError()) {
			[tbl.name.ToCamelCase().toLowerFirst()/]OfflineHelper.after_client_updating();
		}

}
[/template]

[comment
	Select from client; 
	Update on client;
/]
[template public android_fix_foreign_keys_on_client(tbl: Class)]
public void fix_foreign_keys_on_client(){
[if (tbl.eContents(Property)->exists(x | x.type.name.toString().equalsIgnoreCase('invalid'))) ]
/*
	ACCELEO ERROR ON PROPERTY DEFINITION:
[for (it : Property | tbl.eContents(Property))]
	[it.type.name.toString() /]  [it.name.toString() /] [it.toString() /]
[/for]
*/
[else]
[if (tbl.eContents(Property)->exists(x: Property| x.type.name.equalsIgnoreCase(x.name)))]
[if (0 < tbl.eContents(Property)->select(x: Property| x.type.name.equalsIgnoreCase(x.name) 
and
	not(
		x.type.oclAsType(Class).gotStereotype('server_only') or 
		x.type.oclAsType(Class).gotStereotype('client_const')
	)
)->size())
 ]
[tbl.name.ToCamelCase().toLowerFirst()/]OfflineHelper.fixClientForeignKeys();
[/if]
[/if]
[/if]
}
[/template]
[comment << END INSERT AND UPDATE ON CLIENT /]

[comment >> BEGIN INSERT AND UPDATE ON SERVER /]
[template public android_insert_on_server(tbl: Class)]
public void insert_on_server(){
[comment
	all registers with no server_id, solved
/]
	//paginator.setPageSize(100);
	paginator.setPageNumber(0);
	paginator.setFinished(false);
	paginator.setError(false);
	Log.v("rest-api", "atempt to insert on the server .. ");
	while (false == paginator.isFinished()) {
		List<[tbl.name.ToCamelCase()/]> [tbl.name/]_for_insertion_on_server =
				[tbl.name.ToCamelCase().toLowerFirst()/]OfflineHelper.listForInsertOnServer(
						paginator.getPageNumber(),
						paginator.getPageSize()); //step 2,1
		paginator.nextPage();
		Iterator<[tbl.name.ToCamelCase()/]> it = [tbl.name/]_for_insertion_on_server.iterator();
		String json = "['['/]";
		if(it.hasNext()){
			Log.v("rest-api", "building the message .. ");
			json += it.next().toJsonString();
			while(it.hasNext()){
				json += ", " + it.next().toJsonString();
			}
		}else{
			paginator.setFinished(true);
			Log.v("rest-api", "abort insertions..");
			continue;
		}
		json += "[']'/]";
		Log.v("rest-api", "bash_insert:\n"+ json);
		//step 2,2
		client.run(
			"https://192.168.0.250/naiara/sync/[tbl.name/]/bash_insert",
			json,
			new TlsCallback() {
				@Override
				public void CallBack(String result) {
				Log.v("rest-api", "bash_insert :\n" + result);
				try {
					JSONArray array = new JSONArray(result);
[comment] This code is also not likelly to run
					/*
					if (0 == array.length()) {
						paginator.setFinished(true);
					}*/
[/comment]
					for (int i = 0; i < array.length(); i++) {
						JSONObject row = array.getJSONObject(i);
						//step 2,3
						[tbl.name.ToCamelCase().toLowerFirst()/]OfflineHelper.fixAfterServerInsertAndUpdate(
								row.getLong("client_id"),
								row.getLong("server_id"),
								row.getLong("last_update_time")
						);
						Log.v("rest-api", "updating the client");
					}
				} catch (JSONException e) {
					e.printStackTrace();
					paginator.setFinished(true);
				}
			}
		});
	}

}
[/template]

[template public android_update_on_server(tbl: Class)]
public void update_on_server(){
[comment
	take all the dirty registers on client side, solved
/]
	Log.v("rest-api", "attempt to update on the server .. ");
	//paginator.setPageSize(100);
	paginator.setPageNumber(0);
	paginator.setFinished(false);
	paginator.setError(false);
	while (false == paginator.isFinished()) {
		//4,2
		List<[tbl.name.ToCamelCase() /]> update_remote = [tbl.name.ToCamelCase().toLowerFirst()/]OfflineHelper.listForUpdateOnServer(paginator.getPageNumber(), paginator.getPageSize());
		paginator.nextPage();
		Iterator<[tbl.name.ToCamelCase() /]> it = update_remote.iterator();
		String json = "['['/]";
		if (it.hasNext()) {
			Log.v("rest-api", "updating the server..\n");
			json += it.next().toJsonString();
			while (it.hasNext()) {
				json += "," + it.next().toJsonString();
			}
		}else{
			paginator.setFinished(true);
			Log.v("rest-api", "abort server updates..");
			continue;
		}
		json += "[']'/]";
		Log.v("rest-api", "bash_update :\n" + json);
		//todo the date is not correct
		//4,3
		client.run(
			"https://192.168.0.250/naiara/sync/[tbl.name/]/bash_update", json, new TlsCallback() {
			@Override
			public void CallBack(String result) {
				Log.v("rest-api", "bash_update :\n" + result);
				try {
					JSONArray array = new JSONArray(result);
[comment] This code will never run
					/*
					if(0 == array.length()){
						paginator.setFinished(true);
					}*/
[/ comment]
					for (int i = 0; i < array.length(); i++) {
						JSONObject row = array.getJSONObject(i);
						//step 4,4
						[tbl.name.ToCamelCase().toLowerFirst()/]OfflineHelper.fixAfterServerInsertAndUpdate(
								row.getLong("client_id"),
								row.getLong("server_id"),
								row.getLong("last_update_time")
						);
					}
				} catch (JSONException e) {
					e.printStackTrace();
					paginator.setFinished(true);
				}
			}
		});
	}
}
[/template]


[template public updater_class(pname: String, modul: Package, tbl: Class)]
package [pname /].[modul.name /].sync;

import android.content.Context;
import android.util.Log;

import com.uisleandro.util.DBPaginator;
import [pname /].[modul.name /].model.[tbl.name.ToCamelCase() /]OfflineHelper;
import [pname /].[modul.name /].view.[tbl.name.ToCamelCase() /]DataView;
import com.uisleandro.util.web.TLSWebClient2;
import com.uisleandro.util.web.TlsCallback;
import com.uisleandro.util.web.sync.SyncUpdater;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.Iterator;
import java.util.List;

public class [tbl.name.ToCamelCase() /]OfflineDataSync implements SyncUpdater {

	final DBPaginator paginator;
	TLSWebClient2 client;
	[tbl.name.ToCamelCase() /]OfflineHelper [tbl.name.ToCamelCase().toLowerFirst() /]OfflineHelper;

	public [tbl.name.ToCamelCase() /]Sync(TLSWebClient2 client, Context context){
		this.client = client;
		paginator = new DBPaginator();
		[tbl.name.ToCamelCase().toLowerFirst() /]OfflineHelper = new [tbl.name.ToCamelCase()/]OfflineHelper(context);
	}

	[android_insert_on_client(tbl)/]

	[android_update_on_client(tbl)/]

	[android_fix_foreign_keys_on_client(tbl)/]

	[android_insert_on_server(tbl)/]

	[android_update_on_server(tbl)/]

}
[/template]


[template public generateElement(root : Model)]
[comment @main/]

[let pname : String = root.get_configuration_namespace()]
[let vendor : String = 'uisleandro']
[let appName : String = 'Store']
[let cName : String = 'com.'+vendor+'.'+appName]
[comment

I think its better to have
one for each module

I will need to create the views which im returning :'D

 /]
[comment] 
[file ('main/java/'+FolderName(pname)+'sqlite/DbHelper.java', false, 'UTF-8')]
[android_create_dbhelper(root, pname) /]
[/file]
[/comment]

[for (modul : Package | get_modules(root))]
[for (tbl : Class | get_tables(modul))]

[comment] 
[file ('com.uisleandro.Store.Core/src/main/java/'+FolderName(pname)+'/'+modul.name+'/model/'+tbl.name.ToCamelCase()+'Provider.java', false, 'UTF-8')]
[android_create_tbl_datasource_class(pname, modul, tbl)/]
[/file]
[/comment]


[file ('com.uisleandro.Store.Core/src/main/java/'+FolderName(pname)+'/'+modul.name+'/sync/'+tbl.name.ToCamelCase()+'OfflineDataSync.java', false, 'UTF-8')]
[updater_class(pname, modul, tbl) /]
[/file]

[file ('com.uisleandro.Store.Core/src/main/java/'+FolderName(pname)+'/'+modul.name+'/view/'+tbl.name.ToCamelCase()+'DataView.java', false, 'UTF-8')]
[android_create_tblviewclass(pname, modul, tbl) /]
[/file]

[file ('com.uisleandro.Store.Core/src/main/java/'+FolderName(pname)+'/'+modul.name+'/model/'+tbl.name.ToCamelCase()+'OfflineHelper.java', false, 'UTF-8')]
[android_create_offline_helper_class(pname, modul, tbl)/]
[/file]

[/for]
[/for]

[/let][/let][/let][/let]
[/template]


