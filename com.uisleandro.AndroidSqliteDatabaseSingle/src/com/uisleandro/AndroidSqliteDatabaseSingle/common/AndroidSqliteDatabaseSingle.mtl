[comment encoding = UTF-8 /]
[module AndroidSqliteDatabaseSingle('http://www.eclipse.org/uml2/5.0.0/UML')]

[comment CPF is a unique key, please fix it on all databases /]


[template public begin_reserve(name : String)]
// Start of user code [name /]
[/template]

[template public end_reserve(name : String)]
// [name /]
// End of user code
[/template]

[comment TODO: add filters here if needed /]
[query public get_modules(root : Model) : Sequence(Package) = 
eContents(Package)
	->select(x|x.name = 'mvc')
	->first() 
	.eContents(Package)
/]

[comment TODO: add filters here if needed /]
[query public get_tables(modul : Package) : Sequence(Class) =  
eContents(Package)
	->select(x|x.name = 'dataModels')
	->first() 
	.eContents(Class)
/]

[comment TODO: add filters here if needed /]
[query public get_fields(tbl : Class) : Sequence(Property) = 
eContents(Property)
/]

[query public get_no_fks(tbl : Class) : Sequence(Property) = 
eContents(Property)->select(x| not(isFk(x)))
/]

[query public get_fks(tbl : Class) : Sequence(Property) = 
eContents(Property)->select(x| isFk(x))
/]


[comment TODO: add filters here if needed /]
[query public the_client_cant_change(arg : Property) : Boolean = false /]


[query public is_string(arg : Property) : Boolean = 
if null = arg.type or 
arg.type.name.equalsIgnoreCase('Date') or 
arg.type.name.equalsIgnoreCase('DateTime') or 
arg.type.name.equalsIgnoreCase('Time') or 
arg.type.name.equalsIgnoreCase('Identifier') or 
arg.type.name.equalsIgnoreCase('Number') or
arg.type.name.equalsIgnoreCase('PictureType') or
arg.type.name.equalsIgnoreCase('Money') or
arg.type.name.equalsIgnoreCase('PreciseNumber') or 
arg.type.name.equalsIgnoreCase('VeryPreciseNumber2') or
arg.type.name.equalsIgnoreCase('YesNoQuestion') or
isFk() then
false
else
true
endif
 /]

[query public default_zero(arg : Property) : String =
if null = arg.type 
or arg.type.name.equalsIgnoreCase('Date') 
or arg.type.name.equalsIgnoreCase('DateTime') 
or arg.type.name.equalsIgnoreCase('Time') 
or arg.type.name.equalsIgnoreCase('Identifier') 
or arg.type.name.equalsIgnoreCase(arg.name)
then
'0L'
else if arg.type.name.equalsIgnoreCase('Number') 
or arg.type.name.equalsIgnoreCase('PictureType') then 
'0'
else if arg.type.name.equalsIgnoreCase('Money') then 
'0F'
else if arg.type.name.equalsIgnoreCase('PreciseNumber') 
or arg.type.name.equalsIgnoreCase('VeryPreciseNumber2') then 
'0L'
else if arg.type.name.equalsIgnoreCase('YesNoQuestion') then 
'false'
else
'""'
endif endif endif endif endif
 /]

[query public get_configuration_namespace(arg : Model) : String = 
self.eContents(Class)->select(x|x.name='custom_config')->first().eContents(Property)
->select(x|x.type.name.toString().equalsIgnoreCase('app_namespace'))->first().name
 /]

[query public get_java_type(arg: Property): String =
if null = arg.type 
or arg.type.name.equalsIgnoreCase('Date') 
or arg.type.name.equalsIgnoreCase('DateTime') 
or arg.type.name.equalsIgnoreCase('Time') 
or arg.type.name.equalsIgnoreCase('Identifier') 
or arg.type.name.equalsIgnoreCase(arg.name)
then
'long'
else if arg.type.name.equalsIgnoreCase('Number') 
or arg.type.name.equalsIgnoreCase('PictureType') then 
'int'
else if arg.type.name.equalsIgnoreCase('Money') then 
'float'
else if arg.type.name.equalsIgnoreCase('PreciseNumber') 
or arg.type.name.equalsIgnoreCase('VeryPreciseNumber2') then 
'double'
else if arg.type.name.equalsIgnoreCase('YesNoQuestion') then 
'boolean'
else
'String'
endif endif endif endif endif
/]

[query public getter_indexed(arg: Property, cname : String, i: Integer): String =
if null = arg.type
or arg.type.name.equalsIgnoreCase(arg.name)
or arg.type.name.equalsIgnoreCase('Date') 
or arg.type.name.equalsIgnoreCase('DateTime') 
or arg.type.name.equalsIgnoreCase('Time') 
or arg.type.name.equalsIgnoreCase('Identifier')
then 
cname + '.getLong('+i+')'
else if arg.type.name.equalsIgnoreCase('Number') 
or arg.type.name.equalsIgnoreCase('PictureType') then 
cname + '.getInt('+i+')'
else if arg.type.name.equalsIgnoreCase('Money') then 
cname + '.getFloat('+i+')'
else if arg.type.name.equalsIgnoreCase('PreciseNumber') 
or arg.type.name.equalsIgnoreCase('VeryPreciseNumber2') then 
cname + '.getFloat('+i+')'
else if arg.type.name.equalsIgnoreCase('YesNoQuestion') then 
'('+cname + '.getInt('+i+') > 0)'
else
cname + '.getString('+i+')'
endif endif endif endif endif
/]


[query public getter_named(arg: Property, cname : String): String =
if null = arg.type
or arg.type.name.equalsIgnoreCase(arg.name)
or arg.type.name.equalsIgnoreCase('Date') 
or arg.type.name.equalsIgnoreCase('DateTime') 
or arg.type.name.equalsIgnoreCase('Time') 
or arg.type.name.equalsIgnoreCase('Identifier')
then 
cname + '.getLong("'+arg.getName()+'")'
else if arg.type.name.equalsIgnoreCase('Number') 
or arg.type.name.equalsIgnoreCase('PictureType') then 
cname + '.getInt("'+arg.getName()+'")'
else if arg.type.name.equalsIgnoreCase('Money') then 
'Float.valueOf('+cname+'.getString("'+arg.getName()+'"))'
else if arg.type.name.equalsIgnoreCase('PreciseNumber') 
or arg.type.name.equalsIgnoreCase('VeryPreciseNumber2') then 
cname + '.getFloat("'+arg.getName()+'")'
else if arg.type.name.equalsIgnoreCase('YesNoQuestion') then 
cname + '.getInt("'+arg.getName()+'") > 0'
else
cname + '.getString("'+arg.getName()+'")'
endif endif endif endif endif
/]


[comment first android type mapping /]
[query public get_sqlite_type(arg: Property): String =
if null = arg.type then
	'INTEGER'
else if arg.type.name.equalsIgnoreCase(arg.name) then
	'INTEGER'
else if arg.type.name.equalsIgnoreCase('Date') then
	'INTEGER'
else if arg.type.name.equalsIgnoreCase('DateTime') then
	'INTEGER'
else if arg.type.name.equalsIgnoreCase('Time') then
	'INTEGER'
else if arg.type.name.equalsIgnoreCase('Number') then
	'INTEGER'
else if arg.type.name.equalsIgnoreCase('Money') then
	'REAL(10,2)'
else if arg.type.name.equalsIgnoreCase('PreciseNumber') then
	'DOUBLE'
else if arg.type.name.equalsIgnoreCase('VeryPreciseNumber2') then
	'DOUBLE PRECISION'
else if arg.type.name.equalsIgnoreCase('YesNoQuestion') then
	'BOOLEAN'
else if arg.type.name.equalsIgnoreCase('Identifier') then
	'INTEGER'
else if arg.type.name.equalsIgnoreCase('GuidType') then
	'CHAR(36)'
else if arg.type.name.equalsIgnoreCase('Abbreviature') then
	if arg.name.indexOf('uf') > 0
	or arg.name.indexOf('state') > 0
 	then
		'CHAR(2)'
	else
		'CHAR(8)'
	endif
else if arg.type.name.equalsIgnoreCase('BigText') then
	'VARCHAR(256)'
else if arg.type.name.equalsIgnoreCase('File') then
	'VARCHAR(128)'
else if arg.type.name.equalsIgnoreCase('SmallText') then
	if arg.name.indexOf('zip') > 0
	or arg.name.indexOf('cep') > 0
 	then
		'CHAR(15)'
	else
		'CHAR(30)'
	endif
else if arg.type.name.equalsIgnoreCase('MediumText') then
	'VARCHAR(45)'
else if arg.type.name.equalsIgnoreCase('BarcodeType') then
	'CHAR(64)'
else if arg.type.name.equalsIgnoreCase('PictureType') then
	'INTEGER'
else 
	'VARCHAR(45)'
endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif/]


[template public FolderName(arg : String)]
[for (st : String | self.tokenize('.')) separator ('/') after ('/')][st/][/for]
[/template]


[query public isBoolean(arg : Property) : Boolean = 
if(self.type.name.toString().equalsIgnoreCase('boolean')) then true else false endif /]


[query public isFk(prop : Property) : Boolean = 
if null = self.type
or self.type.name.toString().equalsIgnoreCase(self.name) then
true else false endif /]

[query public getName(arg : Property) : String = 
if(self.type.name.toString().equalsIgnoreCase(self.name.toString())) then
'fk_'+self.name
else 
self.name
endif
/]

[query public getNameRef(arg : Property, tname : String) : String = 
if(self.type.name.toString().equalsIgnoreCase(self.name.toString())) then
'DbHelper.'+tname.toUpperCase()+'_FK_'+self.name.toUpperCase()
else 
'DbHelper.'+tname.toUpperCase()+'_'+self.name.toUpperCase()
endif
/]

[query public gotStereotype(arg : NamedElement, sname : String) : Boolean = 
self.getAppliedStereotypes()->exists(s : Stereotype | s.name = sname) /]

[template public ToCamelCase(arg : String)]
[for (it : String | arg.tokenize('_'))][it.toUpperFirst()/][/for]
[/template]

[template public ToCamelCaseSpaced(arg : String)]
[for (it : String | arg.tokenize('_')) separator (' ')][it.toUpperFirst()/][/for]
[/template]


[query public getModelClasses(arg : Package) : Sequence(Class) = 
self.eContents(Package)->select( x | x.name ='model')->first().eContents(Class)
 /]

[comment i dont have a ds for each view but for each tbl /]
[comment so the fix will be on the inserting views 
TODO: aplicar um esteriotipo na classe identidade
/]
[query public getViewClasses(arg : Package) : Sequence(Class) = 
self.eContents(Package)->select( x | x.name ='view')->first().eContents(Class)
 /]

[query public nullable(arg : Property) : String = 
if(self.name.indexOf('update') > 0) then
'NULL'
else
if(self.owner.oclAsType(Class).name.equalsIgnoreCase(self.name)) then
'NULL'
else
if(self.type.name.toString().equalsIgnoreCase(self.name)) then
'NULL'
else
'NOT NULL'
endif
endif
endif
 /]

[query public isSelfFK(arg : Property) : Boolean =
if(self.owner.oclAsType(Class).name.equalsIgnoreCase(self.name)) then
	true
else
	false
endif
 /]

[query public getForeignKeys(arg : Class) : Sequence(Property) = 
self.eContents(Property)->select(x: Property | x.name = x.type.name)->asSequence() /]

[comment substituir depois .. /]
[query public find_modul_name(arg : Package, name: String) : String =
self.eContents(Package)->select(x : Package |
x.eContents(Class)->exists(c : Class | c.name = name)
)->first().name
 /]


[template public android_create_dbhelper(root : Model, pname: String)]
package [pname /].sqlite;

import android.content.ContentValues;
import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/*

if i have got a remote_id,
	use the remote_id
else
	use the local_id

i can maybe keep translation tables

if i got the id on the translation table
it means that my local data is updated

if i dont have the id on the translation table
sent id to the server

so i can keep the internal relations
without dealing with external relations

the server should create the relations.. 1 by 1
but not necessarially keep the relations, which are not
necessary for the server 

1. don't keep local data (system.. etc)
2. keep a local data only for situations with no internet (adding clients..)
3. keep local data


1. don't send data
2. send when the data comes to a given number of rows

TODO: on the server, translate from user_id to system_id
or translate from token_id to system_id

*/


/*
	Better one for each module??
*/
public class DbHelper extends SQLiteOpenHelper {

	private static DbHelper db_instance = null;
	private Context context;

	private static final String DATABASE_NAME = "store.db";
	private static final int DATABASE_VERSION = 1;

// [protected ('cookies')]

	public static final String TABLE_UPDATE_HISTORY = "update_history";
	public static final String UPDATE_HISTORY_TABLE_NAME = "table_name";
		public static final String UPDATE_HISTORY_LAST_UPDATE_TIME = "last_update_time";

	public static final String CREATE_TABLE_UPDATE_HISTORY = "CREATE TABLE IF NOT EXISTS " + TABLE_UPDATE_HISTORY + " (" +
			UPDATE_HISTORY_TABLE_NAME + " CHAR(30) NOT NULL, "+
			UPDATE_HISTORY_LAST_UPDATE_TIME + " INTEGER  NULL " +
			" );";

	private static final String CREATE_INDEX_UPDATE_HISTORY_TNAME = "CREATE UNIQUE INDEX " + TABLE_UPDATE_HISTORY + "_serverid_idx" +
			" ON " + TABLE_UPDATE_HISTORY + " ("+ UPDATE_HISTORY_TABLE_NAME +");";


	public static final String TABLE_COOKIE = "cookie";
	public static final String COOKIE_ID = "id";
	public static final String COOKIE_BASE_DOMAIN ="baseDomain";
	public static final String COOKIE_NAME = "name";
	public static final String COOKIE_VALUE ="value";
	public static final String COOKIE_HOST ="host";
	public static final String COOKIE_PATH = "path";
	public static final String COOKIE_EXPIRY = "expiry";
	public static final String COOKIE_CREATION_TIME = "creationTime";
	public static final String COOKIE_IS_SECURE = "isSecure";
	public static final String COOKIE_LAST_ACESSED = "lastAcessed";
	public static final String COOKIE_IS_HTTP_ONLY = "isHttpOnly"; 

	private static final String CREATE_TABLE_COOKIE = "CREATE TABLE IF NOT EXISTS "+TABLE_COOKIE+" ("+
		COOKIE_ID + " INTEGER PRIMARY KEY ASC AUTOINCREMENT,"+
		COOKIE_BASE_DOMAIN + " TEXT,"+
		COOKIE_NAME + " TEXT,"+
		COOKIE_VALUE + " TEXT,"+
		COOKIE_HOST + " TEXT,"+
		COOKIE_PATH + " TEXT,"+
		COOKIE_EXPIRY + " INTEGER,"+
		COOKIE_CREATION_TIME + " INTEGER,"+
		COOKIE_IS_SECURE + " BOOLEAN,"+
		COOKIE_LAST_ACESSED + " INTEGER,"+
		COOKIE_IS_HTTP_ONLY +" BOOLEAN" +
	");";
// [/protected]


//TODO: controlar a versao do modulo


[for (modul : Package | get_modules(root))]
// [modul.name /]
[for (tbl : Class | get_tables())]

	public static final String TABLE_[tbl.name.toUpperCase()/] = "[modul.name/]_[tbl.name/]";
	public static final String [tbl.name.toUpperCase() /]_ID = "id";
	public static final String [tbl.name.toUpperCase() /]_SERVER_ID = "server_id";
	public static final String [tbl.name.toUpperCase() /]_DIRTY = "dirty";
[for (prop : Property | get_fields(tbl) )]
	public static final String [tbl.name.toUpperCase() /]_[prop.getName().toUpperCase() /] = "[prop.getName() /]";
[/for]

	private static final String CREATE_TABLE_[tbl.name.toUpperCase() /] = "CREATE TABLE " + 
	TABLE_[tbl.name.toUpperCase() /] + " ("+ 
	[tbl.name.toUpperCase() /]_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
	[tbl.name.toUpperCase() /]_SERVER_ID + " INTEGER NULL, " +
	[tbl.name.toUpperCase() /]_DIRTY + " BOOLEAN NOT NULL, " +
[for (prop : Property | get_fields(tbl) )
separator (', " + \n') after (' " + \n')]
	[tbl.name.toUpperCase() /]_[prop.getName().toUpperCase() /] + " [get_sqlite_type(prop) /] [prop.nullable()/][/for]
	");";

	private static final String CREATE_INDEX_[tbl.name.toUpperCase() /]_SERVER_ID = "CREATE UNIQUE INDEX " + TABLE_[tbl.name.toUpperCase() /] + "_serverid_idx" +
	" ON " + TABLE_[tbl.name.toUpperCase() /] + " ("+ [tbl.name.toUpperCase() /]_SERVER_ID +")"; 

[if (tbl.eContents(Property)->exists(p: Property | p.name.equalsIgnoreCase('cpf') ))]
	private static final String CREATE_INDEX_[tbl.name.toUpperCase() /]_CPF = "CREATE UNIQUE INDEX " + TABLE_[tbl.name.toUpperCase()/] + "_cpf_idx" +
	" ON " + TABLE_[tbl.name.toUpperCase() /] + " ("+ [tbl.name.toUpperCase() /]_CPF +")";
[/if]
[/for]
[/for]

[comment end table definition /]
[comment]
[protected ('fill_database') /]
[/comment]
	private void fill(SQLiteDatabase db){

[for (modul : Package | get_modules(root))]
// [modul.name /]
	[for (tbl : Class |  get_tables(modul))]
		db.rawQuery("INSERT INTO update_history (table_name) VALUES ('[tbl.name /]')", null);
	[/for]
[/for]

[comment]
/*
		SQLiteStatement stmt = db.compileStatement("INSERT INTO X(A,B,C) VALUES(?,?,?)");
		stmt.bindDouble(0,123.4);
		stmt.bindNull(1);
		stmt.bindString(2,"asdfa");
		stmt.bindLong(3,1234);
		stmt.bindBlob(4,new byte['['/][']'/]{});
		stmt.execute();
*/
	//the raw filling code are on they respective datasource classes ..
[/comment]
	}
[comment]
[protected /]
[/comment] 

	private DbHelper(Context context) {
		super(context, DATABASE_NAME, null, DATABASE_VERSION);
		this.context = context;
	}

	public static DbHelper getInstance(Context ctx) {
		if (db_instance == null) {
			db_instance = new DbHelper(ctx.getApplicationContext());
		}
		return db_instance;
	}

	@Override
	public void onCreate(SQLiteDatabase db) {

// [protected ('user specification for onCreate')]
		db.execSQL(CREATE_TABLE_COOKIE);
		db.execSQL(CREATE_TABLE_UPDATE_HISTORY);
		db.execSQL(CREATE_INDEX_UPDATE_HISTORY_TNAME);
// [/protected]

[for (modul : Package | get_modules(root) )]
// [modul.name /]
[for (tbl : Class | get_tables(modul) )]
		db.execSQL(CREATE_TABLE_[tbl.name.toUpperCase() /]);
		db.execSQL(CREATE_INDEX_[tbl.name.toUpperCase() /]_SERVER_ID);
[if (tbl.eContents(Property)->exists(p: Property | p.name.equalsIgnoreCase('cpf') ))]
		db.execSQL(CREATE_INDEX_[tbl.name.toUpperCase() /]_CPF);
[/if]
[/for]
[/for]

		fill(db);
	}


	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		//db.execSQL("PRAGMA foreign_keys = OFF;");

[for (modul : Package | get_modules(root) )]
// [modul.name /]
[for (tbl : Class | get_tables(modul) )]
		db.execSQL("DROP TABLE IF EXISTS " + TABLE_[tbl.name.toUpperCase() /]);
[/for]
[/for]

		//db.execSQL("PRAGMA foreign_keys = ON;");
		onCreate(db);
	}

}
[/template]


[query public isDate(arg : Property) : Boolean = 
self.type.name.toString().equalsIgnoreCase('date') /]

[comment]
	TODO: UTIL PACKAGE
[/comment]
[query public to_java_string(arg: Property): String =
if null = arg.type
or arg.type.name.equalsIgnoreCase('BarcodeType')
or arg.type.name.equalsIgnoreCase('File')
or arg.type.name.equalsIgnoreCase('GuidType')
or arg.type.name.equalsIgnoreCase('BigText')
or arg.type.name.equalsIgnoreCase('SmallText')
or arg.type.name.equalsIgnoreCase('Abbreviature')
or arg.type.name.equalsIgnoreCase('MediumText') then
arg.name
else
'String.valueOf('+arg.name+')'
endif/]


[template public android_create_tblviewclass(pname: String, modul: Package, tbl: Class)]
package [pname /].[modul.name /].view; [comment Core is modul.name /]

import org.json.JSONException;
import org.json.JSONObject;
import android.database.Cursor;

public class [tbl.name.ToCamelCase() /]DataView {

	private long id;
	private long server_id;
	private boolean dirty;
[for (prop : Property | get_fields(tbl) )]
	private [get_java_type(prop) /] [prop.getName() /];
[/for]

	public [tbl.name.ToCamelCase()/]DataView () {
		this.id = 0L;
		this.server_id = 0L;
		this.dirty = false;
[for (prop : Property | get_fields(tbl))
]		this.[getName() /] = [default_zero() /];
[/for]
	}

	public long getId () {
		return id;
	}

	public void setId (long id) {
		this.id = id;
	}

	public long getServerId () {
		return server_id;
	}

	public void setServerId (long server_id) {
		this.server_id = server_id;
	}

	public boolean isDirty () {
		return dirty;
	}

	public void setDirty (boolean dirty) {
		this.dirty = dirty;
	}

	[for (prop : Property | get_fields(tbl))]
	public [get_java_type(prop)/] get[prop.getName().ToCamelCase()/] () {
		return [prop.getName() /];
	}

	public void set[prop.getName().ToCamelCase()/] ([get_java_type(prop)/] [prop.getName()/]) {
		this.[prop.getName()/] = [prop.getName()/];
	}

	[/for]
	public String toJsonString () {
		String result = "{" +
			"\"client_id\":\"" + this.id + "\"," +
			"\"server_id\":\"" + this.server_id + "\"," +
[for (prop : Property | get_fields(tbl)
) separator ('+ "\\"," + \n') after ('+ "\\"" + \n')][if (the_client_cant_change(prop))]
		"\"[prop.getName() /]\": " + DbHelper.CONST_FK_[prop.name.toUpperCase() /]
[else]
			"\"[prop.getName() /]\":\"" + this.[prop.getName() /][/if][/for]
		"}";
		return result;
	}

	public String toString () {
[if (tbl.eContents(Property)->exists(x: Property |
	x.name.toString().indexOf('name') > 0 or
	x.name.toString().indexOf('nome') > 0))
]
		return this.[tbl.eContents(Property)->select(x: Property |
	x.name.toString().indexOf('name') > 0 or
	x.name.toString().indexOf('nome') > 0)->first().name /];
[else][if (tbl.eContents(Property)
->exists(x: Property | is_string(x)) )]
		return this.[tbl.eContents(Property)->select(x: Property | is_string(x) )->first().name /];
[else]
		return "[tbl.name.ToCamelCase() /]View";
[/if][/if]

	}

	public static [tbl.name.ToCamelCase() /]View FromJson(String json){
		if(json != null) {
			try {
				JSONObject obj = new JSONObject(json);
				return [tbl.name.ToCamelCase() /]View.FromJsonObj(obj);
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	public static [tbl.name.ToCamelCase() /]View FromJsonObj (JSONObject obj) {
		if(null != obj) {
			try {
				[tbl.name.ToCamelCase() /]View result = new [tbl.name.ToCamelCase() /]View();
				if(obj.has("client_id") && !obj.isNull("client_id")){
					result.setId(obj.getLong("client_id"));
				}
				if(obj.has("server_id") && !obj.isNull("server_id")){
					result.setServerId(obj.getLong("server_id"));
				}
				/* if(obj.has("dirty") && !obj.isNull("dirty")){
					result.setDirty(obj.getInt("dirty") > 0);
				} */
[for (prop : Property | get_fields(tbl))]
[if (prop.isFk())]
				if(obj.has("[prop.getName() /]") && !obj.isNull("[prop.getName() /]")){
					result.set[prop.getName().ToCamelCase()/]([getter_named(prop, 'obj') /]);
				}
[else]
				result.set[prop.getName().ToCamelCase()/]([getter_named(prop, 'obj') /]);
[/if]
[/for]
				return result;
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	public static [tbl.name.ToCamelCase() /]View FromCursor (Cursor cursor) {
		if(null != cursor){
			[tbl.name.ToCamelCase() /]View result = new [tbl.name.ToCamelCase() /]View();
			result.setId(cursor.getLong(0));
			result.setServerId(cursor.getLong(1));
			result.setDirty(cursor.getInt(2) > 0);
[for (prop : Property | get_fields(tbl))]
			result.set[prop.getName().ToCamelCase() /]([getter_indexed(prop,'cursor', i+2) /]);
[/for]
			return result;		
		}
		return null;
	}

	public String[ '[' /][ ']' /] toInsertArray () {
		return new String[ '[' /][ ']' /]{[for (prop : Property | get_fields(tbl)) separator (', ')][to_java_string(prop) /][/for]};
	}

	public String[ '[' /][ ']' /] toUpdateArray () {
		return new String[ '[' /][ ']' /]{String.valueOf(id), String.valueOf(server_id), String.valueOf(dirty), [for (prop : Property | get_fields(tbl)) separator (', ')][to_java_string(prop) /][/for]};
	}

}
[/template]


[template public PackName(arg : NamedElement)]
[if ( oclIsTypeOf(Property) )
][if( oclAsType(Property).isFk() )
][ToCamelCase(oclAsType(Property).type.oclAsType(Class).
owner.owner.oclAsType(NamedElement).name)
/][else][ToCamelCase(owner.
owner.owner.oclAsType(NamedElement).name)
/][/if][else][ToCamelCase(owner.owner.oclAsType(NamedElement).name)
/][/if][/template]


[template public android_create_content_provider(pname: String, modul: Package, tbl: Class)]
[if (tbl.eContents(Property)->exists(x | null = x.type)) ]
/*
ON [tbl.getQualifiedName() /]
	ERROR ON PROPERTY DEFINITION:
[for (it : Property | tbl.eContents(Property)->select(x | null = x.type))]
	THE TYPE OF "[it.name.toString() /]" IS SET TO NULL
[/for]
*/
[else]
[begin_reserve('reserved-for:AndroidSqliteDatabase001') /]
package [pname /].Core.model;  [comment 'Core' == modul.name/]

import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

//old
//import com.uisleandro.util.LongDateFormatter;
//import [pname /].model.DbHelper;
//import [pname /].[modul.name /].model.[tbl.name.ToCamelCase() /]DbHelper;

import [pname /].DbHelper;
[end_reserve('reserved-for:AndroidSqliteDatabase001') /]

// [protected ('reserved-for:AndroidSqliteSyncSingle001')]
// reserved-for:AndroidSqliteSyncSingle001
// [/protected]

// [protected ('reserved-for:AndroidSqliteQuerySingle001')]
// reserved-for:AndroidSqliteQuerySingle001
// [/protected]

[begin_reserve('reserved-for:AndroidSqliteDatabase002') /]
public class [tbl.name.ToCamelCase() /]Provider extends ContentProvider {


	public static final String AUTHORITY = "com.uisleandro.[tbl.name /]";
	public static final String SCHEME = "content://";
	private static final UriMatcher MATCHER = new UriMatcher(UriMatcher.NO_MATCH);
	
	[comment]
		The name of the functions will be place here
	[/comment]
	public static final int [tbl.name.toUpperCase() /]_INSERT_NUMBER = 1;
	public static final String [tbl.name.toUpperCase() /]_INSERT_TYPE = ContentResolver.CURSOR_DIR_BASE_TYPE+"/insert";
	public static final String [tbl.name.toUpperCase() /]_INSERT = SCHEME + AUTHORITY + "/insert";
	public static final Uri URI_[tbl.name.toUpperCase() /]_INSERT = Uri.parse([tbl.name.toUpperCase() /]_INSERT);
	public static final String [tbl.name.toUpperCase() /]_INSERT_BASE = [tbl.name.toUpperCase() /]_INSERT + "/";

	public static final int [tbl.name.toUpperCase() /]_UPDATE_NUMBER = 2;
	public static final String [tbl.name.toUpperCase() /]_UPDATE_TYPE = ContentResolver.CURSOR_DIR_BASE_TYPE+"/update";
	public static final String [tbl.name.toUpperCase() /]_UPDATE = SCHEME + AUTHORITY + "/update";
	public static final Uri URI_[tbl.name.toUpperCase() /]_UPDATE = Uri.parse([tbl.name.toUpperCase() /]_UPDATE);
	public static final String [tbl.name.toUpperCase() /]_UPDATE_BASE = [tbl.name.toUpperCase() /]_UPDATE + "/";

	public static final int [tbl.name.toUpperCase() /]_DELETE_NUMBER = 3;
	public static final String [tbl.name.toUpperCase() /]_DELETE_TYPE = ContentResolver.CURSOR_DIR_BASE_TYPE+"/delete";
	public static final String [tbl.name.toUpperCase() /]_DELETE = SCHEME + AUTHORITY + "/delete";
	public static final Uri URI_[tbl.name.toUpperCase() /]_DELETE = Uri.parse([tbl.name.toUpperCase() /]_DELETE);
	public static final String [tbl.name.toUpperCase() /]_DELETE_BASE = [tbl.name.toUpperCase() /]_DELETE + "/";

	public static final int [tbl.name.toUpperCase() /]_ALL_NUMBER = 4;
	public static final String [tbl.name.toUpperCase() /]_ALL_TYPE = ContentResolver.CURSOR_DIR_BASE_TYPE+"/all";
	public static final String [tbl.name.toUpperCase() /]_ALL = SCHEME + AUTHORITY + "/all";
	public static final Uri URI_[tbl.name.toUpperCase() /]_ALL = Uri.parse([tbl.name.toUpperCase() /]_ALL);
	public static final String [tbl.name.toUpperCase() /]_ALL_BASE = [tbl.name.toUpperCase() /]_ALL + "/";

	public static final int [tbl.name.toUpperCase() /]_SOME_NUMBER = 5;
	public static final String [tbl.name.toUpperCase() /]_SOME_TYPE = ContentResolver.CURSOR_DIR_BASE_TYPE+"/some";
	public static final String [tbl.name.toUpperCase() /]_SOME = SCHEME + AUTHORITY + "/some";
	public static final Uri URI_[tbl.name.toUpperCase() /]_SOME = Uri.parse([tbl.name.toUpperCase() /]_SOME);
	public static final String [tbl.name.toUpperCase() /]_SOME_BASE = [tbl.name.toUpperCase() /]_SOME + "/";

	public static final int [tbl.name.toUpperCase() /]_BY_ID_NUMBER = 6;
	public static final String [tbl.name.toUpperCase() /]_BY_ID_TYPE = ContentResolver.CURSOR_DIR_BASE_TYPE+"/by_id";
	public static final String [tbl.name.toUpperCase() /]_BY_ID = SCHEME + AUTHORITY + "/by_id";
	public static final Uri URI_[tbl.name.toUpperCase() /]_BY_ID = Uri.parse([tbl.name.toUpperCase() /]_BY_ID);
	public static final String [tbl.name.toUpperCase() /]_BY_ID_BASE = [tbl.name.toUpperCase() /]_BY_ID + "/";

	public static final int [tbl.name.toUpperCase() /]_LAST_ID_NUMBER = 7;
	public static final String [tbl.name.toUpperCase() /]_LAST_ID_TYPE = ContentResolver.CURSOR_DIR_BASE_TYPE+"/last_id";
	public static final String [tbl.name.toUpperCase() /]_LAST_ID = SCHEME + AUTHORITY + "/last_id";
	public static final Uri URI_[tbl.name.toUpperCase() /]_LAST_ID = Uri.parse([tbl.name.toUpperCase() /]_LAST_ID);
	public static final String [tbl.name.toUpperCase() /]_LAST_ID_BASE = [tbl.name.toUpperCase() /]_LAST_ID + "/";


[end_reserve('reserved-for:AndroidSqliteDatabase002') /]


// [protected ('reserved-for:AndroidSqliteSyncSingle002')]
// reserved-for:AndroidSqliteSyncSingle003
// [/protected]

// [protected ('reserved-for:AndroidSqliteQuerySingle002')]
// reserved-for:AndroidSqliteQuerySingle002
// [/protected]

[begin_reserve('reserved-for:AndroidSqliteDatabase003') /]

	static {
		MATCHER.addURI(AUTHORITY,"insert", [tbl.name.toUpperCase() /]_INSERT_NUMBER);
		MATCHER.addURI(AUTHORITY,"update", [tbl.name.toUpperCase() /]_UPDATE_NUMBER);
		MATCHER.addURI(AUTHORITY,"delete", [tbl.name.toUpperCase() /]_DELETE_NUMBER);
		MATCHER.addURI(AUTHORITY,"all", [tbl.name.toUpperCase() /]_ALL_NUMBER);
		MATCHER.addURI(AUTHORITY,"some", [tbl.name.toUpperCase() /]_SOME_NUMBER);
		MATCHER.addURI(AUTHORITY,"by_id", [tbl.name.toUpperCase() /]_BY_ID_NUMBER);
		MATCHER.addURI(AUTHORITY,"last_id", [tbl.name.toUpperCase() /]_LAST_ID_NUMBER);
[end_reserve('reserved-for:AndroidSqliteDatabase003') /]

// [protected ('reserved-for:AndroidSqliteQuerySingle002.1')]
// reserved-for:AndroidSqliteQuerySingle002.1
// [/protected]

[begin_reserve('reserved-for:AndroidSqliteDatabase003.1') /]
	}

	private SQLiteDatabase database;
	private DbHelper db_helper;
	private static final String[ '[' /][ ']' /] selectableColumns = new String[ '[' /][ ']' /] { 
		DbHelper.[tbl.name.toUpperCase() /]_ID,
		DbHelper.[tbl.name.toUpperCase() /]_SERVER_ID,
		DbHelper.[tbl.name.toUpperCase() /]_DIRTY,
[for (prop : Property | get_fields(tbl))
separator (', \n')]
		DbHelper.[tbl.name.toUpperCase() 
/]_[prop.getName().toUpperCase() /][/for]

	};

	public [tbl.name.ToCamelCase() /]DataSource (Context context) {
		db_helper = DbHelper.getInstance(context);
		try{
			database = db_helper.getWritableDatabase();
		}catch(SQLException e){
			Log.wtf("[tbl.name.ToCamelCase() /]DataSource", "Exception: "+Log.getStackTraceString(e));
		}
	}

	public void open () throws SQLException {
		database = db_helper.getWritableDatabase();
	}

	public void close () {
		db_helper.close();
	}

	public Cursor listAll () {
		Cursor cursor = database.query(DbHelper.TABLE_[tbl.name.toUpperCase()/],
			selectableColumns,null,null, null, null, null);
		return cursor;
	}

	public Cursor getById (long id) {
		Cursor cursor = database.query(DbHelper.TABLE_[tbl.name.toUpperCase() /],
			selectableColumns,
			DbHelper.[tbl.name.toUpperCase() /]_ID + " = " + id,
			null, null, null, null);
		return cursor;
	}

	public Cursor listSome (long page_count, long page_size) {
		String query = "SELECT id, server_id, dirty, " +
[for (prop : Property | get_fields(tbl) ) separator (', " +\n') after ('" +\n')]			"[prop.getName()/][/for]			" FROM " + DbHelper.TABLE_[tbl.name.toUpperCase() /];
		if(page_size > 0){
			query += " LIMIT " + String.valueOf(page_size) + " OFFSET " + String.valueOf(page_size * page_count);
		}
		query += ";";
		Cursor cursor = database.rawQuery(query, null);
		return cursor;
	}

	public Cursor getLastId () {
		String query = "SELECT MAX(id) FROM " + DbHelper.TABLE_[tbl.name.toUpperCase() /] +";";
		Cursor cursor = database.rawQuery(query, null);
		return cursor;		
	}

// begin content-provider-interface

	@Override
	public boolean onCreate () {
		return false;
	}

	@Nullable
	@Override
	public String getType (@NonNull Uri uri) {

		switch (MATCHER.match(uri)){
			case [tbl.name.toUpperCase() /]_INSERT_NUMBER:
				return [tbl.name.toUpperCase() /]_INSERT_TYPE;
			case [tbl.name.toUpperCase() /]_UPDATE_NUMBER:
				return [tbl.name.toUpperCase() /]_UPDATE_TYPE;
			case [tbl.name.toUpperCase() /]_DELETE_NUMBER:
				return [tbl.name.toUpperCase() /]_DELETE_TYPE;
			case [tbl.name.toUpperCase() /]_ALL_NUMBER:
				return [tbl.name.toUpperCase() /]_ALL_TYPE;
			case [tbl.name.toUpperCase() /]_SOME_NUMBER:
				return [tbl.name.toUpperCase() /]_SOME_TYPE;
			case [tbl.name.toUpperCase() /]_BY_ID_NUMBER:
				return [tbl.name.toUpperCase() /]_BY_ID_TYPE;
			case [tbl.name.toUpperCase() /]_LAST_ID_NUMBER:
				return [tbl.name.toUpperCase() /]_LAST_ID_TYPE;
[end_reserve('reserved-for:AndroidSqliteDatabase003.1') /]

// [protected ('reserved-for:AndroidSqliteQuerySingle002.2')]
// reserved-for:AndroidSqliteQuerySingle002.2
// [/protected]

[begin_reserve('reserved-for:AndroidSqliteDatabase003.2') /]
		}
		return null;
	}
[end_reserve('reserved-for:AndroidSqliteDatabase003.2') /]

[begin_reserve('reserved-for:AndroidSqliteDatabase004') /]
	@Nullable
	@Override
	public Uri insert (@NonNull Uri uri, @Nullable ContentValues values) {
		Cursor result = null;
		if (URI_[tbl.name.toUpperCase() /]_INSERT.equals(uri)) {
			result = database.insert(DbHelper.TABLE_[tbl.name.toUpperCase() /], null, values);
		}
[end_reserve('reserved-for:AndroidSqliteDatabase004') /]

// [protected ('reserved-for:AndroidSqliteQuerySingle003')]
// reserved-for:AndroidSqliteQuerySingle003
// [/protected]

[begin_reserve('reserved-for:AndroidSqliteDatabase005') /]
		return null;
	}
[end_reserve('reserved-for:AndroidSqliteDatabase005') /]

[begin_reserve('reserved-for:AndroidSqliteDatabase006') /]
	@Override
	public int update (@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection, @Nullable String[ '[' /][ ']' /] selectionArgs) {
		int result = 0;
		if (URI_[tbl.name.toUpperCase() /]_UPDATE.equals(uri)) {
			result = database.update(DbHelper.TABLE_[tbl.name.toUpperCase() /], values, DbHelper.[tbl.name.toUpperCase() /]_ID + " = " + selectionArgs[ '[' /]0[ ']' /], null);
		}
[end_reserve('reserved-for:AndroidSqliteDatabase006') /]

// [protected ('reserved-for:AndroidSqliteQuerySingle004')]
// reserved-for:AndroidSqliteQuerySingle004
// [/protected]

[begin_reserve('reserved-for:AndroidSqliteDatabase007') /]
		return result;
	}
[end_reserve('reserved-for:AndroidSqliteDatabase007') /]

[begin_reserve('reserved-for:AndroidSqliteDatabase008') /]
	@Override
	public int delete (@NonNull Uri uri, @Nullable String selection, @Nullable String[ '[' /][ ']' /] selectionArgs) {
		int result = 0;
		if (URI_[tbl.name.toUpperCase() /]_DELETE.equals(uri)) {
			result = database.delete(DbHelper.TABLE_[tbl.name.toUpperCase()/], DbHelper.[tbl.name.toUpperCase()/]_ID + " = " + selectionArgs[ '[' /]0[ ']' /], null);
		}
[end_reserve('reserved-for:AndroidSqliteDatabase008') /]

// [protected ('reserved-for:AndroidSqliteQuerySingle005')]
// reserved-for:AndroidSqliteQuerySingle005
// [/protected]

[begin_reserve('reserved-for:AndroidSqliteDatabase009') /]
		return result;
	}
[end_reserve('reserved-for:AndroidSqliteDatabase009') /]

// end content-provider-interface

// [protected ('reserved-for:AndroidSqliteSyncSingle003')]
// reserved-for:AndroidSqliteSyncSingle003
// [/protected]

// [protected ('reserved-for:AndroidSqliteQuerySingle006')]
// reserved-for:AndroidSqliteQuerySingle006
// [/protected]

[begin_reserve('reserved-for:AndroidSqliteDatabase010') /]
	// TODO: I NEED TO KNOW HOW TO MAKE VARIOUS QUERIES DEPENDING ON THE URI
	@Nullable
	@Override
	public Cursor query(@NonNull Uri uri, @Nullable String[ '[' /][ ']' /] projection, @Nullable String selection, @Nullable String[ '[' /][ ']' /] selectionArgs, @Nullable String sortOrder) {
		Cursor result = null;
		if (URI_[tbl.name.toUpperCase() /]_ALL.equals(uri)) {
			result = listAll();
		}
		else if (URI_[tbl.name.toUpperCase() /]_SOME.equals(uri)) {
			result = listSome(Long.parseLong(selectionArgs[ '[' /]0[ ']' /]), Long.parseLong(selectionArgs[ '[' /]1[ ']' /]));
		}
		else if (URI_[tbl.name.toUpperCase() /]_BY_ID.equals(uri)) {
			result = getById(Long.parseLong(selectionArgs[ '[' /]0[ ']' /]));
		}
		else if (URI_[tbl.name.toUpperCase() /]_LAST_ID.equals(uri)) {
			result = getLastId();
		}
[end_reserve('reserved-for:AndroidSqliteDatabase010') /]

// [protected ('reserved-for:AndroidSqliteSyncSingle004')]
// reserved-for:AndroidSqliteSyncSingle004
// [/protected]

// [protected ('reserved-for:AndroidSqliteQuerySingle007')]
// reserved-for:AndroidSqliteQuerySingle007
// [/protected]

[begin_reserve('reserved-for:AndroidSqliteDatabase011') /]
		return result;
	}
}
[end_reserve('reserved-for:AndroidSqliteDatabase011') /]
[/if]
[/template]

[template public android_create_content_provider_ds(pname: String, modul: Package, tbl: Class)]
[if (tbl.eContents(Property)->exists(x | null = x.type)) ]
/*
ON [tbl.getQualifiedName() /]
	ERROR ON PROPERTY DEFINITION:
[for (it : Property | tbl.eContents(Property)->select(x | null = x.type))]
	THE TYPE OF "[it.name.toString() /]" IS SET TO NULL
[/for]
*/
[else]
[begin_reserve('reserved-for:AndroidSqliteDatabaseSingle001') /]
package [pname /].[modul.name/].model;  

import java.util.ArrayList;
import java.util.List;
import android.database.Cursor;
import android.net.Uri;
import android.util.Log;
import [pname /].[modul.name/].view.[tbl.name.ToCamelCase() /]DataView
[end_reserve('reserved-for:AndroidSqliteDatabaseSingle001') /]

// [protected ('reserved-for:AndroidSqliteQuerySingle001')]
// reserved-for:AndroidSqliteQuerySingle001
// [/protected]

[begin_reserve('reserved-for:AndroidSqliteDatabaseSingle002') /]
public class [tbl.name.ToCamelCase() /]DataSource {

	public static final String AUTHORITY = "com.uisleandro.[tbl.name /]";
	public static final String SCHEME = "content://";

	[comment]
		The name of the functions will be place here
	[/comment]
	public static final String [tbl.name.toUpperCase() /]_INSERT = SCHEME + AUTHORITY + "/insert";
	public static final String [tbl.name.toUpperCase() /]_UPDATE = SCHEME + AUTHORITY + "/update";
	public static final String [tbl.name.toUpperCase() /]_DELETE = SCHEME + AUTHORITY + "/delete";
	public static final String [tbl.name.toUpperCase() /]_ALL = SCHEME + AUTHORITY + "/all";
	public static final String [tbl.name.toUpperCase() /]_SOME = SCHEME + AUTHORITY + "/some";
	public static final String [tbl.name.toUpperCase() /]_BY_ID = SCHEME + AUTHORITY + "/by_id";
	public static final String [tbl.name.toUpperCase() /]_LAST_ID = SCHEME + AUTHORITY + "/last_id";

	Context context;
	public [tbl.name.ToCamelCase() /]DataSource (Context context) {
		this.context = context;
	}

	public List<[tbl.name.ToCamelCase() /]View> listAll () {
		List<[tbl.name.ToCamelCase() /]View> those = new ArrayList<>();
		Cursor cursor = context.getContentResolver().query([tbl.name.toUpperCase() /]_ALL, null, null null, null);
		if (null != cursor) {
			cursor.moveToFirst();
		    while(!cursor.isAfterLast()){
		      [tbl.name.ToCamelCase() /]View that = [tbl.name.ToCamelCase() /]View.FromCursor(cursor);
		      those.add(that);
		      cursor.moveToNext();
		    }
		    cursor.close();
		}
	    return those;
	}

	public [tbl.name.ToCamelCase() /]View getById (long id) {
		CashRegister that = null;
		Cursor cursor = context.getContentResolver().query([tbl.name.toUpperCase() /]_BY_ID, null, null, new String[ '[' /][ ']' /]{ String.valueOf(id) }, null);
		if (null != cursor) {
			cursor.moveToFirst();
		    if(!cursor.isAfterLast()){
		      that = [tbl.name.ToCamelCase() /]View.FromCursor(cursor);
		    }
			cursor.close();
		}
	    return that;
	}

	public List<[tbl.name.ToCamelCase() /]View listSome (long page_count, long page_size) {
		List<[tbl.name.ToCamelCase() /]View> those = new ArrayList<>();
		Cursor cursor = context.getContentResolver().query([tbl.name.toUpperCase() /]_SOME, new String[ '[' /][ ']' /]{ String.valueOf(page_count), String.valueOf(page_size) }, null null, null);
		if (null != cursor) {
			cursor.moveToFirst();
		    while(!cursor.isAfterLast()){
		      [tbl.name.ToCamelCase() /]View that = [tbl.name.ToCamelCase() /]View.FromCursor(cursor);
		      those.add(that);
		      cursor.moveToNext();
		    }
		    cursor.close();
		}
	    return those;
	}

	public long getLastId () {
		long result = 0;
		Cursor cursor = context.getContentResolver().query([tbl.name.toUpperCase() /]_LAST_ID, null, null, null, null);
		if (null != cursor) {
			cursor.moveToFirst();
		    if(!cursor.isAfterLast()){
		      result = cursor.getLong(0)
		    }
		}
	    return result;	
	}

	public int insert ([tbl.name.ToCamelCase() /]View that) {
		context.getContentResolver().insert([tbl.name.toUpperCase() /]_INSERT, that.toInsertArray());
		return 0;
	}

	public int update ([tbl.name.ToCamelCase() /]View that) {
		return context.getContentResolver().update([tbl.name.toUpperCase() /]_UPDATE, that.toUpdateArray(), that.getId());
	}

	public int delete ([tbl.name.ToCamelCase() /]View that) {
		return context.getContentResolver().delete([tbl.name.toUpperCase() /]_DELETE, null, new String[ '[' /][ ']' /]{ String.valueOf(that.getId()) });
	}

	public int deleteById (long id) {
		return context.getContentResolver().delete([tbl.name.toUpperCase() /]_DELETE, null, new String[ '[' /][ ']' /]{ String.valueOf(id) });
	}
[end_reserve('reserved-for:AndroidSqliteDatabaseSingle002') /]

// [protected ('reserved-for:AndroidSqliteQuerySingle002')]
// reserved-for:AndroidSqliteQuerySingle002
// [/protected]

[begin_reserve('reserved-for:AndroidSqliteDatabaseSingle003') /]
}
[end_reserve('reserved-for:AndroidSqliteDatabaseSingle003') /]
[/if]
[/template]


[template public Camel2(arg : String)
][for (name : String | tokenize('.')) separator ('.')
][name /][/for][/template]

[template public generateElement(root : Model)]
[comment @main/]

[let pname : String = root.get_configuration_namespace()]
[let vendor : String = 'uisleandro']
[let appName : String = 'Store']
[let cName : String = 'com.'+vendor+'.'+appName]

[comment]
	FROM THIS VERSION OF THE CODE
	I JUST BRING BACK THIS CODE, WHICH MEANS THAT
	ALL THE TABLES WILL BE GENERATED IN A SINGLE PLACE DUE TO THE DIFFICULTY OF
	UPDATING THE DATABASE ON A MODULAR APPLICATION 
[/comment]
[file (cName+'.Core/src/main/java/'+FolderName(pname)+'/DbHelper.java', false, 'UTF-8')]
[android_create_dbhelper(root, pname) /]
[/file]

[comment]
	THE DEFAULT VIEWS AND DATASOURCES
	FROM THE DATASOURCES I NEED TO CREATE THE CONTENT PROVIDERS, DON'T FORGET 

	IN THIS VERSION OF THE CODE EVERYTHING IS PLACED
	IN THE CORE PACKAGE,
	THIS WILL MAKE POSSIBLE TO UPDATE THE DATABASE FOR NOW

[/comment]
[for (modul : Package | get_modules(root))]
[for (tbl : Class | get_tables(modul))]

[comment]
	MAYBE IM GONNA CREATE EACH VIEW ON ITS RESPECTIVE PACKAGE
[/comment]
[file (cName+'.'+ToCamelCase(modul.name)+'/src/main/java/'+FolderName(pname)+'/'+modul.name+'/view/'+tbl.name.ToCamelCase()+'DataView.java', false, 'UTF-8')]
[android_create_tblviewclass(pname, modul, tbl) /]
[/file]

[comment]
	NOW IM GONNA GO CREATE THE DATASOURCE CLASS ON EACH PACKAGE
[/comment]
[file (cName+'.'+ToCamelCase(modul.name)+'/src/main/java/'+FolderName(pname)+'/'+modul.name+'/model/'+tbl.name.ToCamelCase()+'DataSource.java', false, 'UTF-8')]
[android_create_content_provider_ds(pname, modul, tbl)/]
[/file]

[comment]
	I DONT KNOW WHY TO CREATE A CONTENT PROVIDER TO CORE ITSELF
[/comment]
[file (cName+'.Core/src/main/java/'+FolderName(pname)+'/'+modul.name+'/model/'+tbl.name.ToCamelCase()+'Provider.java', false, 'UTF-8')]
[android_create_content_provider(pname, modul, tbl)/]
[/file]

[/for]
[/for]

[/let]
[/let]
[/let]
[/let]
[/template]


